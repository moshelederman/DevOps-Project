name: CI/CD Pipeline for project App

on:
  push:
    branches:
      - '**'  # Trigger for all branches

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the latest code
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          pip install bandit
      - name: Run Bandit
        run: |
          bandit -r project
   
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose  

      - name: Load environment variables
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: |
          echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" >> $GITHUB_ENV
          echo "MYSQL_DATABASE=${MYSQL_DATABASE}" >> $GITHUB_ENV
          echo "MYSQL_USER=${MYSQL_USER}" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> $GITHUB_ENV

      - name: Navigate, stop existing containers, and start new ones
        run: |
          cd project
          ls -la
          docker-compose down -v || true
          docker-compose up --build -d

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build the Docker Image
      - name: Build Docker Image
        run: |
          cd project
          ls -la
          IMAGE_NAME=moshelederman/project-stars
          BUILD_NUMBER=${{ github.run_number }}
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:0.0.$BUILD_NUMBER .

      # Step 4: Push the Docker Image (only for main branch)
      - name: Push Docker Image
        if: github.ref == 'refs/heads/main'
        run: |
          IMAGE_NAME=moshelederman/project-stars
          BUILD_NUMBER=${{ github.run_number }}
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:0.0.$BUILD_NUMBER

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awscli
          aws --version
          sudo apt-get remove -y awscli || true
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}

      - name: Decode and save key pair
        run: |
          mkdir -p ~/.ssh
          echo "$MY_KEY_PAIR" | base64 --decode > ~/.ssh/my-key-pair.pem
          chmod 400 ~/.ssh/my-key-pair.pem
        env:
          MY_KEY_PAIR: ${{ secrets.MY_KEY_PAIR }}
          
          
      - name: Launch EC2 instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-05576a079321f21f8 \
            --instance-type t2.micro \
            --key-name my-key-pair \
            --security-group-ids sg-06b04d46e3ce50a91 \
            --subnet-id subnet-0c3628dbc4e1aae55 \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=GitHubActionEC2}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
        
          echo "Launched instance with ID: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          
          
      - name: Wait for EC2 to be ready
        run: |
          aws ec2 wait instance-status-ok --instance-ids ${{ env.INSTANCE_ID }}
          
      - name: Get EC2 Public IP
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "EC2 instance public IP: $PUBLIC_IP"
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          
      - name: Output EC2 details
        run: |
         echo "Instance ID: ${{ env.INSTANCE_ID }}"
         echo "Public IP: ${{ env.PUBLIC_IP }}"         

  create-pr:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Create a Pull Request to main
      - name: Create Pull Request to Main
        uses: peter-evans/create-pull-request@v5
        with:
          branch: ${{ github.ref_name }}
          base: main
          title: "Merge ${{ github.ref_name }} to main"
          body: "This pull request merges branch `${{ github.ref_name }}` into the `main` branch."

        
          
              
     
             
             
